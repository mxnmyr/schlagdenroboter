# Test Script f√ºr Leaderboard Reset Funktionalit√§t
# Stelle sicher, dass der Server l√§uft: start_server.bat

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  LEADERBOARD RESET TEST" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

$baseUrl = "http://127.0.0.1:5000"

# Test 1: Einzelnes Leaderboard zur√ºcksetzen (Hei√üer Draht)
Write-Host "Test 1: Hei√üer Draht Leaderboard zur√ºcksetzen" -ForegroundColor Yellow
Write-Host "-----------------------------------------------" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/admin/reset_leaderboard" -Method POST -Body @{game_type='heisser_draht'} -UseBasicParsing
    $result = $response.Content | ConvertFrom-Json
    
    if ($result.success) {
        Write-Host "‚úÖ SUCCESS: $($result.message)" -ForegroundColor Green
        Write-Host "   Backup: $($result.backup_file)" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå FAILED: $($result.message)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå ERROR: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 2: Einzelnes Leaderboard zur√ºcksetzen (Vier Gewinnt)
Write-Host "Test 2: Vier Gewinnt Leaderboard zur√ºcksetzen" -ForegroundColor Yellow
Write-Host "-----------------------------------------------" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/admin/reset_leaderboard" -Method POST -Body @{game_type='vier_gewinnt'} -UseBasicParsing
    $result = $response.Content | ConvertFrom-Json
    
    if ($result.success) {
        Write-Host "‚úÖ SUCCESS: $($result.message)" -ForegroundColor Green
        Write-Host "   Backup: $($result.backup_file)" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå FAILED: $($result.message)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå ERROR: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 3: Einzelnes Leaderboard zur√ºcksetzen (Puzzle)
Write-Host "Test 3: Puzzle Leaderboard zur√ºcksetzen" -ForegroundColor Yellow
Write-Host "-----------------------------------------------" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/admin/reset_leaderboard" -Method POST -Body @{game_type='puzzle'} -UseBasicParsing
    $result = $response.Content | ConvertFrom-Json
    
    if ($result.success) {
        Write-Host "‚úÖ SUCCESS: $($result.message)" -ForegroundColor Green
        Write-Host "   Backup: $($result.backup_file)" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå FAILED: $($result.message)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå ERROR: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 4: Alle Leaderboards zur√ºcksetzen (VORSICHT!)
Write-Host "Test 4: ALLE Leaderboards zur√ºcksetzen" -ForegroundColor Yellow
Write-Host "-----------------------------------------------" -ForegroundColor Yellow
Write-Host "‚ö†Ô∏è  WARNUNG: Dies l√∂scht ALLE Spieldaten!" -ForegroundColor Red
Write-Host "    (Nur f√ºr Testzwecke - normalerweise nicht empfohlen)" -ForegroundColor Gray

$confirm = Read-Host "`nWirklich ALLE Leaderboards zur√ºcksetzen? (yes/no)"

if ($confirm -eq "yes") {
    try {
        $response = Invoke-WebRequest -Uri "$baseUrl/admin/reset_leaderboard" -Method POST -Body @{game_type='all'} -UseBasicParsing
        $result = $response.Content | ConvertFrom-Json
        
        if ($result.success) {
            Write-Host "‚úÖ SUCCESS: $($result.message)" -ForegroundColor Green
            Write-Host "   Backup: $($result.backup_file)" -ForegroundColor Gray
        } else {
            Write-Host "‚ùå FAILED: $($result.message)" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå ERROR: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚è≠Ô∏è  Test √ºbersprungen" -ForegroundColor Gray
}

Write-Host ""

# Test 5: Ung√ºltiger Game Type
Write-Host "Test 5: Ung√ºltigen Game Type testen" -ForegroundColor Yellow
Write-Host "-----------------------------------------------" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/admin/reset_leaderboard" -Method POST -Body @{game_type='invalid_game'} -UseBasicParsing -ErrorAction Stop
    Write-Host "‚ùå FAILED: Sollte einen Fehler zur√ºckgeben" -ForegroundColor Red
} catch {
    Write-Host "‚úÖ SUCCESS: Fehler erkannt (erwartetes Verhalten)" -ForegroundColor Green
    Write-Host "   Fehlermeldung: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""

# Test 6: Fehlender Game Type
Write-Host "Test 6: Fehlenden Game Type testen" -ForegroundColor Yellow
Write-Host "-----------------------------------------------" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/admin/reset_leaderboard" -Method POST -Body @{} -UseBasicParsing -ErrorAction Stop
    Write-Host "‚ùå FAILED: Sollte einen Fehler zur√ºckgeben" -ForegroundColor Red
} catch {
    Write-Host "‚úÖ SUCCESS: Fehler erkannt (erwartetes Verhalten)" -ForegroundColor Green
    Write-Host "   Fehlermeldung: $($_.Exception.Message)" -ForegroundColor Gray
}

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  TEST ABGESCHLOSSEN" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

Write-Host "üí° Hinweise:" -ForegroundColor Yellow
Write-Host "   - Backup-Dateien wurden erstellt (leaderboard_backup_*.json)" -ForegroundColor Gray
Write-Host "   - √ñffne Admin-Panel: $baseUrl/admin" -ForegroundColor Gray
Write-Host "   - √úberpr√ºfe Leaderboards: $baseUrl/" -ForegroundColor Gray
